import Player from './Player.js';
import PlayerCosmetics from './PlayerCosmetics/PlayerCosmetics.js';
import PlayerGifting from './PlayerGifting.js';
import PlayerHousing from './PlayerHousing/PlayerHousing.js';
import PlayerQuests from './PlayerQuests/PlayerQuests.js';
import PlayerRankPurchase from './PlayerRankPurchase.js';
import PlayerRewards from './PlayerRewards/PlayerRewards.js';
import PlayerSocialMedia from './PlayerSocialMedia.js';
import { expect, expectTypeOf, test } from 'vitest';
import type Guild from '../Guild/Guild.js';
import type House from '../House.js';
import type PlayerAchievements from './PlayerAchievements/PlayerAchievements.js';
import type PlayerAdventRewards from './PlayerAdventRewards/PlayerAdventRewards.js';
import type PlayerParkour from './PlayerParkour.js';
import type PlayerScorpiusBribe from './PlayerScorpiusBribe.js';
import type PlayerStats from './PlayerStats.js';
import type RecentGame from '../RecentGame.js';
import type { ChatChannel, Language, LevelProgress, PlayerRank } from '../../Types/Player.js';

test('Player', () => {
  const data = new Player({ stats: 'meow' }, { guild: null, houses: null, recentGames: null });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expect(data.rank).toBeNull();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.firstLoginAt).toBeDefined();
  expect(data.firstLoginAt).toBeNull();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date | null>();
  expect(data.lastLoginAt).toBeDefined();
  expect(data.lastLoginAt).toBeNull();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.lastLogoutAt).toBeDefined();
  expect(data.lastLogoutAt).toBeNull();
  expectTypeOf(data.lastLogoutAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<PlayerAchievements>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.claimedCenturyCakeAt).toBeDefined();
  expect(data.claimedCenturyCakeAt).toBeNull();
  expectTypeOf(data.claimedCenturyCakeAt).toEqualTypeOf<Date | null>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.cosmetics).toBeDefined();
  expect(data.cosmetics).toBeInstanceOf(PlayerCosmetics);
  expectTypeOf(data.cosmetics).toEqualTypeOf<PlayerCosmetics>();
  expect(data.rankPurchase).toBeDefined();
  expect(data.rankPurchase).toBeInstanceOf(PlayerRankPurchase);
  expectTypeOf(data.rankPurchase).toEqualTypeOf<PlayerRankPurchase>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<Record<string, Record<string, number>>>();
  expect(data.quests).toBeDefined();
  expect(data.quests).toBeInstanceOf(PlayerQuests);
  expectTypeOf(data.quests).toEqualTypeOf<PlayerQuests>();
  expect(data.rewards).toBeDefined();
  expect(data.rewards).toBeInstanceOf(PlayerRewards);
  expectTypeOf(data.rewards).toEqualTypeOf<PlayerRewards>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<PlayerParkour[]>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.skyBlockFreeCookieAt).toBeDefined();
  expectTypeOf(data.skyBlockFreeCookieAt).toEqualTypeOf<Date | null>();
  expect(data.housing).toBeDefined();
  expect(data.housing).toBeInstanceOf(PlayerHousing);
  expectTypeOf(data.housing).toEqualTypeOf<PlayerHousing>();
  expect(data.adventRewards).toBeDefined();
  expectTypeOf(data.adventRewards).toEqualTypeOf<PlayerAdventRewards[]>();
  expect(data.gifting).toBeDefined();
  expect(data.gifting).toBeInstanceOf(PlayerGifting);
  expectTypeOf(data.gifting).toEqualTypeOf<PlayerGifting>();
  expect(data.socialMedia).toBeDefined();
  expect(data.socialMedia).toBeInstanceOf(PlayerSocialMedia);
  expectTypeOf(data.socialMedia).toEqualTypeOf<PlayerSocialMedia>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<PlayerScorpiusBribe[]>();
  expect(data.guild).toBeDefined();
  expect(data.guild).toBeNull();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expect(data.houses).toBeNull();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expect(data.recentGames).toBeNull();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
});
