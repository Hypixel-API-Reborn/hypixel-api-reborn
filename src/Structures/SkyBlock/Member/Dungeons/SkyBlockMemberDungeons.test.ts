import SkyBlockMemberDungeons from './SkyBlockMemberDungeons.js';
import SkyBlockMemberDungeonsClasses from './SkyBlockMemberDungeonsClasses.js';
import SkyBlockMemberDungeonsMode from './SkyBlockMemberDungeonsMode.js';
import SkyBlockMemberDungeonsTreasureRun from './SkyBlockMemberDungeonsTreasureRun.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { DungeonFloor, SkillLevelData } from '../../../../Types/SkyBlock.js';

test('SkyBlockMemberDungeons', () => {
  const data = new SkyBlockMemberDungeons({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyBlockMemberDungeons);
  expectTypeOf(data).toEqualTypeOf<SkyBlockMemberDungeons>();
  expect(data.catacombs).toBeDefined();
  expectTypeOf(data.catacombs).toEqualTypeOf<SkyBlockMemberDungeonsMode>();
  expect(data.masterCatacombs).toBeDefined();
  expectTypeOf(data.masterCatacombs).toEqualTypeOf<SkyBlockMemberDungeonsMode>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<SkillLevelData>();
  expect(data.classes).toBeDefined();
  expectTypeOf(data.classes).toEqualTypeOf<SkyBlockMemberDungeonsClasses>();
  expect(data.unlockedJournals).toBeDefined();
  expectTypeOf(data.unlockedJournals).toEqualTypeOf<string[]>();
  expect(data.treasures).toBeDefined();
  expectTypeOf(data.treasures).toEqualTypeOf<SkyBlockMemberDungeonsTreasureRun[]>();
  expect(data.lastDungeonRun).toBeDefined();
  expectTypeOf(data.lastDungeonRun).toEqualTypeOf<DungeonFloor | 'UNKNOWN'>();
  expect(data.secrets).toBeDefined();
  expectTypeOf(data.secrets).toEqualTypeOf<number>();
  expect(data.toString).toBeDefined();
  expectTypeOf(data.toString).toEqualTypeOf<() => number>();
  expect(data.toString()).toBeDefined();
  expect(data.toString()).toEqual(data.level.level);
  expectTypeOf(data.toString()).toEqualTypeOf<number>();
});
