import SkyblockProfile from './SkyblockProfile.js';
import { expect, expectTypeOf, test } from 'vitest';
import type SkyblockGarden from '../Garden/SkyblockGarden.js';
import type SkyblockMember from '../Member/SkyblockMember.js';
import type SkyblockProfileBanking from './Banking/SkyblockProfileBanking.js';
import type SkyblockProfileCommunityUpgrades from './CommunityUpgrades/SkyblockProfileCommunityUpgrades.js';
import type { SkyblockProfileName, SkyblockProfileType } from '../../../Types/Skyblock.js';

test('SkyblockProfile', () => {
  const data = new SkyblockProfile({ stats: 'meow' }, { uuid: 'meow', garden: null });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyblockProfile);
  expectTypeOf(data).toEqualTypeOf<SkyblockProfile>();
  expect(data.profileId).toBeDefined();
  expectTypeOf(data.profileId).toEqualTypeOf<string>();
  expect(data.communityUpgrades).toBeDefined();
  expectTypeOf(data.communityUpgrades).toEqualTypeOf<SkyblockProfileCommunityUpgrades>();
  expect(data.createdTimestamp).toBeDefined();
  expectTypeOf(data.createdTimestamp).toEqualTypeOf<number | null>();
  expect(data.createdAt).toBeDefined();
  expectTypeOf(data.createdAt).toEqualTypeOf<Date | null>();
  expect(data.members).toBeDefined();
  expectTypeOf(data.members).toEqualTypeOf<SkyblockMember[]>();
  expect(data.me).toBeDefined();
  expectTypeOf(data.me).toEqualTypeOf<SkyblockMember | null>();
  expect(data.gameMode).toBeDefined();
  expectTypeOf(data.gameMode).toEqualTypeOf<SkyblockProfileType | null>();
  expect(data.banking).toBeDefined();
  expectTypeOf(data.banking).toEqualTypeOf<SkyblockProfileBanking>();
  expect(data.profileName).toBeDefined();
  expectTypeOf(data.profileName).toEqualTypeOf<SkyblockProfileName | 'UNKNOWN'>();
  expect(data.selected).toBeDefined();
  expectTypeOf(data.selected).toEqualTypeOf<boolean>();
  expect(data.garden).toBeDefined();
  expectTypeOf(data.garden).toEqualTypeOf<SkyblockGarden | null>();
});
