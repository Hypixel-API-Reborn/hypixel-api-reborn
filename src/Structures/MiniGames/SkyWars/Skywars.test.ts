import SkyWars from './SkyWars.js';
import SkyWarsMode from './SkyWarsMode.js';
import SkyWarsModeStats from './SkyWarsModeStats.js';
import SkyWarsPackages from './SkyWarsPackages.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SkyWarsPrestige } from '../../../Types/Player.js';

test('SkyWars', () => {
  const data = new SkyWars({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyWars);
  expectTypeOf(data).toEqualTypeOf<SkyWars>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.souls).toBeDefined();
  expect(data.souls).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.souls).toEqualTypeOf<number>();
  expect(data.tokens).toBeDefined();
  expect(data.tokens).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.tokens).toEqualTypeOf<number>();
  expect(data.experience).toBeDefined();
  expect(data.experience).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.experience).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expect(data.level).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.levelProgress).toBeDefined();
  expectTypeOf(data.levelProgress).toEqualTypeOf<any>();
  expect(data.levelFormatted).toBeDefined();
  expectTypeOf(data.levelFormatted).toEqualTypeOf<string | null>();
  expect(data.prestige).toBeDefined();
  expectTypeOf(data.prestige).toEqualTypeOf<SkyWarsPrestige>();
  expect(data.opals).toBeDefined();
  expect(data.opals).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.opals).toEqualTypeOf<number>();
  expect(data.avarice).toBeDefined();
  expect(data.avarice).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.avarice).toEqualTypeOf<number>();
  expect(data.tenacity).toBeDefined();
  expect(data.tenacity).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.tenacity).toEqualTypeOf<number>();
  expect(data.shards).toBeDefined();
  expect(data.shards).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shards).toEqualTypeOf<number>();
  expect(data.angelOfDeathLevel).toBeDefined();
  expect(data.angelOfDeathLevel).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.angelOfDeathLevel).toEqualTypeOf<number>();
  expect(data.killStreak).toBeDefined();
  expect(data.killStreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.killStreak).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.voidKills).toBeDefined();
  expect(data.voidKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.voidKills).toEqualTypeOf<number>();
  expect(data.meleeKills).toBeDefined();
  expect(data.meleeKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.meleeKills).toEqualTypeOf<number>();
  expect(data.bowKills).toBeDefined();
  expect(data.bowKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bowKills).toEqualTypeOf<number>();
  expect(data.mobKills).toBeDefined();
  expect(data.mobKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mobKills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expect(data.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.survivedPlayers).toBeDefined();
  expect(data.survivedPlayers).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.survivedPlayers).toEqualTypeOf<number>();
  expect(data.chestsOpened).toBeDefined();
  expect(data.chestsOpened).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.chestsOpened).toEqualTypeOf<number>();
  expect(data.timePlayed).toBeDefined();
  expect(data.timePlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.timePlayed).toEqualTypeOf<number>();
  expect(data.shard).toBeDefined();
  expect(data.shard).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shard).toEqualTypeOf<number>();
  expect(data.longestBowShot).toBeDefined();
  expect(data.longestBowShot).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.longestBowShot).toEqualTypeOf<number>();
  expect(data.arrowsShot).toBeDefined();
  expect(data.arrowsShot).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.arrowsShot).toEqualTypeOf<number>();
  expect(data.arrowsHit).toBeDefined();
  expect(data.arrowsHit).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.arrowsHit).toEqualTypeOf<number>();
  expect(data.bowAccuracy).toBeDefined();
  expect(data.bowAccuracy).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bowAccuracy).toEqualTypeOf<number>();
  expect(data.fastestWin).toBeDefined();
  expect(data.fastestWin).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.fastestWin).toEqualTypeOf<number>();
  expect(data.heads).toBeDefined();
  expect(data.heads).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.heads).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.blocksBroken).toBeDefined();
  expect(data.blocksBroken).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksBroken).toEqualTypeOf<number>();
  expect(data.eggThrown).toBeDefined();
  expect(data.eggThrown).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.eggThrown).toEqualTypeOf<number>();
  expect(data.enderpearlsThrown).toBeDefined();
  expect(data.enderpearlsThrown).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.enderpearlsThrown).toEqualTypeOf<number>();
  expect(data.solo).toBeDefined();
  expectTypeOf(data.solo).toEqualTypeOf<SkyWarsModeStats>();
  expect(data.team).toBeDefined();
  expectTypeOf(data.team).toEqualTypeOf<SkyWarsModeStats>();
  expect(data.mega).toBeDefined();
  expectTypeOf(data.mega).toEqualTypeOf<SkyWarsMode>();
  expect(data.megaDoubles).toBeDefined();
  expectTypeOf(data.megaDoubles).toEqualTypeOf<SkyWarsMode>();
  expect(data.lab).toBeDefined();
  expectTypeOf(data.lab).toEqualTypeOf<SkyWarsMode>();
  expect(data.packages).toBeDefined();
  expectTypeOf(data.packages).toEqualTypeOf<SkyWarsPackages>();
});
