import CopsAndCrims from './CopsAndCrims.js';
import CopsAndCrimsGamemode from './CopsAndCrimsGamemode.js';
import CopsAndCrimsGun from './CopsAndCrimsGun.js';
import { expect, expectTypeOf, test } from 'vitest';

test('CopsAndCrims', () => {
  const data = new CopsAndCrims({ stats: 'meow' });
  expect(data).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data).toEqualTypeOf<CopsAndCrims>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.criminalKills).toBeDefined();
  expect(data.criminalKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.criminalKills).toEqualTypeOf<number>();
  expect(data.copKills).toBeDefined();
  expect(data.copKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.copKills).toEqualTypeOf<number>();
  expect(data.headShotKills).toBeDefined();
  expect(data.headShotKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.headShotKills).toEqualTypeOf<number>();
  expect(data.grenadeKills).toBeDefined();
  expect(data.grenadeKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.grenadeKills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.winsOnTemple).toBeDefined();
  expect(data.winsOnTemple).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnTemple).toEqualTypeOf<number>();
  expect(data.winsOnCarrier).toBeDefined();
  expect(data.winsOnCarrier).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnCarrier).toEqualTypeOf<number>();
  expect(data.winsOnAtomic).toBeDefined();
  expect(data.winsOnAtomic).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnAtomic).toEqualTypeOf<number>();
  expect(data.winsOnAlleyway).toBeDefined();
  expect(data.winsOnAlleyway).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnAlleyway).toEqualTypeOf<number>();
  expect(data.winsOnSandstorm).toBeDefined();
  expect(data.winsOnSandstorm).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnSandstorm).toEqualTypeOf<number>();
  expect(data.winsOnReserve).toBeDefined();
  expect(data.winsOnReserve).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnReserve).toEqualTypeOf<number>();
  expect(data.winsOnOvergrown).toBeDefined();
  expect(data.winsOnOvergrown).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnOvergrown).toEqualTypeOf<number>();
  expect(data.winsOnBazaar).toBeDefined();
  expect(data.winsOnBazaar).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnBazaar).toEqualTypeOf<number>();
  expect(data.winsOnJunction).toBeDefined();
  expect(data.winsOnJunction).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnJunction).toEqualTypeOf<number>();
  expect(data.winsOnDerailed).toBeDefined();
  expect(data.winsOnDerailed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnDerailed).toEqualTypeOf<number>();
  expect(data.winsOnCastle).toBeDefined();
  expect(data.winsOnCastle).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnCastle).toEqualTypeOf<number>();
  expect(data.winsOnRuins).toBeDefined();
  expect(data.winsOnRuins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnRuins).toEqualTypeOf<number>();
  expect(data.winsOnRiviera).toBeDefined();
  expect(data.winsOnRiviera).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnRiviera).toEqualTypeOf<number>();
  expect(data.winsOnHarbor).toBeDefined();
  expect(data.winsOnHarbor).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnHarbor).toEqualTypeOf<number>();
  expect(data.winsOnAtomicV1).toBeDefined();
  expect(data.winsOnAtomicV1).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnAtomicV1).toEqualTypeOf<number>();
  expect(data.winsOnAtomicV2).toBeDefined();
  expect(data.winsOnAtomicV2).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnAtomicV2).toEqualTypeOf<number>();
  expect(data.winsOnMelonFactory).toBeDefined();
  expect(data.winsOnMelonFactory).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnMelonFactory).toEqualTypeOf<number>();
  expect(data.winsOnMelonFactoryV2).toBeDefined();
  expect(data.winsOnMelonFactoryV2).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winsOnMelonFactoryV2).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expect(data.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.roundWins).toBeDefined();
  expect(data.roundWins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.roundWins).toEqualTypeOf<number>();
  expect(data.bombsPlanted).toBeDefined();
  expect(data.bombsPlanted).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bombsPlanted).toEqualTypeOf<number>();
  expect(data.bombsDefused).toBeDefined();
  expect(data.bombsDefused).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bombsDefused).toEqualTypeOf<number>();
  expect(data.shotsFired).toBeDefined();
  expect(data.shotsFired).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shotsFired).toEqualTypeOf<number>();
  expect(data.showPrefixInLobby).toBeDefined();
  expectTypeOf(data.showPrefixInLobby).toEqualTypeOf<boolean>();
  expect(data.selectedLobbyPrefix).toBeDefined();
  expectTypeOf(data.selectedLobbyPrefix).toEqualTypeOf<string>();
  expect(data.lobbyPrefixColor).toBeDefined();
  expectTypeOf(data.lobbyPrefixColor).toEqualTypeOf<string>();
  expect(data.showHints).toBeDefined();
  expectTypeOf(data.showHints).toEqualTypeOf<boolean>();
  expect(data.showKillsInPrefix).toBeDefined();
  expectTypeOf(data.showKillsInPrefix).toEqualTypeOf<boolean>();
  expect(data.score).toBeDefined();
  expect(data.score).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.score).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expect(data.level).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.activeGlyph).toBeDefined();
  expectTypeOf(data.activeGlyph).toEqualTypeOf<string>();
  expect(data.activeScheme).toBeDefined();
  expectTypeOf(data.activeScheme).toEqualTypeOf<string>();
  expect(data.activeEmblem).toBeDefined();
  expectTypeOf(data.activeEmblem).toEqualTypeOf<string>();
  expect(data.packages).toBeDefined();
  expectTypeOf(data.packages).toEqualTypeOf<string[]>();
  expect(data.smg).toBeDefined();
  expectTypeOf(data.smg).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.rifle).toBeDefined();
  expectTypeOf(data.rifle).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.carbine).toBeDefined();
  expectTypeOf(data.carbine).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.magnum).toBeDefined();
  expectTypeOf(data.magnum).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.shotgun).toBeDefined();
  expectTypeOf(data.shotgun).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.sniper).toBeDefined();
  expectTypeOf(data.sniper).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.scopedRifle).toBeDefined();
  expectTypeOf(data.scopedRifle).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.handgun).toBeDefined();
  expectTypeOf(data.handgun).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.autoShotgun).toBeDefined();
  expectTypeOf(data.autoShotgun).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.bullpup).toBeDefined();
  expectTypeOf(data.bullpup).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.knife).toBeDefined();
  expectTypeOf(data.knife).toEqualTypeOf<CopsAndCrimsGun>();
  expect(data.deathmatch).toBeDefined();
  expectTypeOf(data.deathmatch).toEqualTypeOf<CopsAndCrimsGamemode>();
  expect(data.gungame).toBeDefined();
  expectTypeOf(data.gungame).toEqualTypeOf<CopsAndCrimsGamemode>();
});
