import type RequestData from '../../Private/RequestData.ts';

class SkyBlockItem {
  name: string;
  material: string;
  id: string;
  durability: number;
  skin: Record<string, any>;
  category: string;
  tier: string;
  npcSellPrice: number;
  salvages: Record<string, any>[];
  raritySalvageable: boolean;
  stats: Record<string, any>;
  unstackable: boolean;
  museumData: Record<string, any>;
  color: string;
  soulbound: string;
  hasUuid: boolean | string;
  gemstoneSlots: Record<string, any>[];
  glowing: boolean;
  canAuction: boolean;
  canTrade: boolean;
  requirements: Record<string, any>[];
  canPlace: boolean;
  museum: boolean;
  generator: string;
  generatorTier: number;
  furniture: string;
  itemSpecific: Record<string, any>;
  description: string;
  upgradeCosts: Array<Array<Record<string, any>>>;
  gearScore: number;
  dungeonItem: boolean;
  dungeonItemConversionCost: Record<string, any>;
  catacombsRequirements: Record<string, any>[];
  canHaveAttributes: boolean;
  salvageableFromRecipe: boolean;
  canRecombobulate: boolean;
  enchantments: Record<string, any>;
  riftTransferrable: boolean;
  origin: string;
  doubleTapToDrop: boolean;
  hideFromViewRecipeCommand: boolean;
  swordType: string;
  abilityDamageScaling: number;
  tieredStats: Record<string, any>;
  motesSellPrice: number;
  crystal: string;
  canBurnInFurnace: boolean;
  salvage: Record<string, any>;
  serializable: boolean;
  canInteract: boolean;
  canInteractRightClick: boolean;
  privateIsland: string;
  canHavePowerScroll: boolean;
  canInteractEntity: boolean;
  miningFortune: number;
  recipes: Record<string, any>[];
  cannotReforge: boolean;
  loseMotesValueOnTransfer: boolean;
  prestige: Record<string, any>;
  constructor(data: Record<string, any>) {
    this.name = data?.name || 'UNKNOWN';
    this.material = data?.material || 'UNKNOWN';
    this.id = data?.id || 'UNKNOWN';
    this.durability = data?.durability || 0;
    this.skin = data?.skin || {};
    this.category = data?.category || 'UNKNOWN';
    this.tier = data?.tier || 'UNKNOWN';
    this.npcSellPrice = data?.npc_sell_price || 0;
    this.salvages = data?.salvages || [];
    this.raritySalvageable = data?.rarity_salvageable || false;
    this.stats = data?.stats || {};
    this.unstackable = data?.unstackable || false;
    this.museumData = data?.museum_data || {};
    this.color = data?.color || 'UNKNOWN';
    this.soulbound = data?.soulbound || 'UNKNOWN';
    this.hasUuid = data?.has_uuid || false;
    this.gemstoneSlots = data?.gemstone_slots || [];
    this.glowing = data?.glowing || false;
    this.canAuction = data?.can_auction || false;
    this.canTrade = data?.can_trade || false;
    this.requirements = data?.requirements || [];
    this.canPlace = data?.can_place || false;
    this.museum = data?.museum || false;
    this.generator = data?.generator || 'UNKNOWN';
    this.generatorTier = data?.generator_tier || 0;
    this.furniture = data?.furniture || 'UNKNOWN';
    this.itemSpecific = data?.item_specific || {};
    this.description = data?.description || 'UNKNOWN';
    this.upgradeCosts = data?.upgrade_costs || [];
    this.gearScore = data?.gear_score || 0;
    this.dungeonItem = data?.dungeon_item || false;
    this.dungeonItemConversionCost = data?.dungeon_item_conversion_cost || {};
    this.catacombsRequirements = data?.catacombs_requirements || [];
    this.canHaveAttributes = data?.can_have_attributes || false;
    this.salvageableFromRecipe = data?.salvageable_from_recipe || false;
    this.canRecombobulate = data?.can_recombobulate || false;
    this.enchantments = data?.enchantments || {};
    this.riftTransferrable = data?.rift_transferrable || false;
    this.origin = data?.origin || 'UNKNOWN';
    this.doubleTapToDrop = data?.double_tap_to_drop || false;
    this.hideFromViewRecipeCommand = data?.hide_from_viewrecipe_command || false;
    this.swordType = data?.sword_type || 'UNKNOWN';
    this.abilityDamageScaling = data?.ability_damage_scaling || 0;
    this.tieredStats = data?.tiered_stats || {};
    this.motesSellPrice = data?.motes_sell_price || 0;
    this.crystal = data?.crystal || 'UNKNOWN';
    this.canBurnInFurnace = data?.can_burn_in_furnace || false;
    this.salvage = data?.salvage || {};
    this.serializable = data?.serializable || false;
    this.canInteract = data?.can_interact || false;
    this.canInteractRightClick = data?.can_interact_right_click || false;
    this.privateIsland = data?.private_island || 'UNKNOWN';
    this.canHavePowerScroll = data?.can_have_power_scroll || false;
    this.canInteractEntity = data?.can_interact_entity || false;
    this.miningFortune = data?.MINING_FORTUNE || 0;
    this.recipes = data?.recipes || [];
    this.cannotReforge = data?.cannot_reforge || false;
    this.loseMotesValueOnTransfer = data?.lose_motes_value_on_transfer || false;
    this.prestige = data?.prestige || {};
  }

  toString(): string {
    return this.name;
  }

  isRaw(): this is RequestData {
    return false;
  }
}

export default SkyBlockItem;
