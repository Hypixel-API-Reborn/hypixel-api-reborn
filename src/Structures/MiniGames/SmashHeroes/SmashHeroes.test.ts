import SmashHeoresHero from './SmashHeoresHero.js';
import SmashHeroes from './SmashHeroes.js';
import SmashHeroesMode from './SmashHeroesMode.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SmashHeoresHeros } from '../../../Types/Player.js';

test('SmashHeroes', () => {
  const data = new SmashHeroes({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data).toEqualTypeOf<SmashHeroes>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expect(data.level).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.winStreak).toBeDefined();
  expect(data.winStreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winStreak).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.smashed).toBeDefined();
  expect(data.smashed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.smashed).toEqualTypeOf<number>();
  expect(data['1v1v1v1']).toBeDefined();
  expectTypeOf(data['1v1v1v1']).toEqualTypeOf<SmashHeroesMode>();
  expect(data['2v2']).toBeDefined();
  expectTypeOf(data['2v2']).toEqualTypeOf<SmashHeroesMode>();
  expect(data['2v2v2']).toBeDefined();
  expectTypeOf(data['2v2v2']).toEqualTypeOf<SmashHeroesMode>();
  expect(data.activeHero).toBeDefined();
  expectTypeOf(data.activeHero).toEqualTypeOf<SmashHeoresHeros | 'None'>();
  expect(data.theBulk).toBeDefined();
  expectTypeOf(data.theBulk).toEqualTypeOf<SmashHeoresHero>();
  expect(data.cakeMonster).toBeDefined();
  expectTypeOf(data.cakeMonster).toEqualTypeOf<SmashHeoresHero>();
  expect(data.generalCluck).toBeDefined();
  expectTypeOf(data.generalCluck).toEqualTypeOf<SmashHeoresHero>();
  expect(data.botmun).toBeDefined();
  expectTypeOf(data.botmun).toEqualTypeOf<SmashHeoresHero>();
  expect(data.marauder).toBeDefined();
  expectTypeOf(data.marauder).toEqualTypeOf<SmashHeoresHero>();
  expect(data.pug).toBeDefined();
  expectTypeOf(data.pug).toEqualTypeOf<SmashHeoresHero>();
  expect(data.tinman).toBeDefined();
  expectTypeOf(data.tinman).toEqualTypeOf<SmashHeoresHero>();
  expect(data.spoderman).toBeDefined();
  expectTypeOf(data.spoderman).toEqualTypeOf<SmashHeoresHero>();
  expect(data.frosty).toBeDefined();
  expectTypeOf(data.frosty).toEqualTypeOf<SmashHeoresHero>();
  expect(data.sergeantShield).toBeDefined();
  expectTypeOf(data.sergeantShield).toEqualTypeOf<SmashHeoresHero>();
  expect(data.skullfire).toBeDefined();
  expectTypeOf(data.skullfire).toEqualTypeOf<SmashHeoresHero>();
  expect(data.goku).toBeDefined();
  expectTypeOf(data.goku).toEqualTypeOf<SmashHeoresHero>();
  expect(data.sanic).toBeDefined();
  expectTypeOf(data.sanic).toEqualTypeOf<SmashHeoresHero>();
  expect(data.duskCrawler).toBeDefined();
  expectTypeOf(data.duskCrawler).toEqualTypeOf<SmashHeoresHero>();
  expect(data.shoopDaWhoop).toBeDefined();
  expectTypeOf(data.shoopDaWhoop).toEqualTypeOf<SmashHeoresHero>();
  expect(data.greenHood).toBeDefined();
  expectTypeOf(data.greenHood).toEqualTypeOf<SmashHeoresHero>();
});
