import SkyblockMemberSlayersQuest from './SkyblockMemberSlayersQuest.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SkyblockArea, SkyblockSlayer } from '../../../../Types/Skyblock.js';

test('SkyblockMemberSlayersQuest', () => {
  const data = new SkyblockMemberSlayersQuest({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyblockMemberSlayersQuest);
  expectTypeOf(data).toEqualTypeOf<SkyblockMemberSlayersQuest>();
  expect(data.type).toBeDefined();
  expectTypeOf(data.type).toEqualTypeOf<SkyblockSlayer | 'UNKNOWN'>();
  expect(data.tier).toBeDefined();
  expectTypeOf(data.tier).toEqualTypeOf<number>();
  expect(data.startTimestamp).toBeDefined();
  expectTypeOf(data.startTimestamp).toEqualTypeOf<number>();
  expect(data.startAt).toBeDefined();
  expectTypeOf(data.startAt).toEqualTypeOf<Date>();
  expect(data.completionState).toBeDefined();
  expectTypeOf(data.completionState).toEqualTypeOf<number>();
  expect(data.usedArmor).toBeDefined();
  expectTypeOf(data.usedArmor).toEqualTypeOf<boolean>();
  expect(data.solo).toBeDefined();
  expectTypeOf(data.solo).toEqualTypeOf<boolean>();
  expect(data.combatXp).toBeDefined();
  expectTypeOf(data.combatXp).toEqualTypeOf<number>();
  expect(data.recentMobKills).toBeDefined();
  expectTypeOf(data.recentMobKills).toEqualTypeOf<{ xp: number; timestamp: number; timestampAt: Date }[]>();
  expect(data.lastKilledMobIsland).toBeDefined();
  expectTypeOf(data.lastKilledMobIsland).toEqualTypeOf<SkyblockArea | 'UNKNOWN'>();
  expect(data.xpOnLastFollowerSpawn).toBeDefined();
  expectTypeOf(data.xpOnLastFollowerSpawn).toEqualTypeOf<number>();
  expect(data.spawnTimestamp).toBeDefined();
  expectTypeOf(data.spawnTimestamp).toEqualTypeOf<number>();
  expect(data.spawnAt).toBeDefined();
  expectTypeOf(data.spawnAt).toEqualTypeOf<Date>();
});
