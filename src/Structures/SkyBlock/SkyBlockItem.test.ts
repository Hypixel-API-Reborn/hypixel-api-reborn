import SkyBlockItem from './SkyBlockItem.js';
import { expect, expectTypeOf, test } from 'vitest';

test('SkyBlockItem', () => {
  const data = new SkyBlockItem({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyBlockItem);
  expectTypeOf(data).toEqualTypeOf<SkyBlockItem>();
  expect(data.name).toBeDefined();
  expectTypeOf(data.name).toEqualTypeOf<string>();
  expect(data.material).toBeDefined();
  expectTypeOf(data.material).toEqualTypeOf<string>();
  expect(data.id).toBeDefined();
  expectTypeOf(data.id).toEqualTypeOf<string>();
  expect(data.durability).toBeDefined();
  expectTypeOf(data.durability).toEqualTypeOf<number>();
  expect(data.skin).toBeDefined();
  expectTypeOf(data.skin).toEqualTypeOf<Record<string, any>>();
  expect(data.category).toBeDefined();
  expectTypeOf(data.category).toEqualTypeOf<string>();
  expect(data.tier).toBeDefined();
  expectTypeOf(data.tier).toEqualTypeOf<string>();
  expect(data.npcSellPrice).toBeDefined();
  expectTypeOf(data.npcSellPrice).toEqualTypeOf<number>();
  expect(data.salvages).toBeDefined();
  expectTypeOf(data.salvages).toEqualTypeOf<Record<string, any>[]>();
  expect(data.raritySalvageable).toBeDefined();
  expectTypeOf(data.raritySalvageable).toEqualTypeOf<boolean>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<Record<string, any>>();
  expect(data.unstackable).toBeDefined();
  expectTypeOf(data.unstackable).toEqualTypeOf<boolean>();
  expect(data.museumData).toBeDefined();
  expectTypeOf(data.museumData).toEqualTypeOf<Record<string, any>>();
  expect(data.color).toBeDefined();
  expectTypeOf(data.color).toEqualTypeOf<string>();
  expect(data.soulbound).toBeDefined();
  expectTypeOf(data.soulbound).toEqualTypeOf<string>();
  expect(data.hasUuid).toBeDefined();
  expectTypeOf(data.hasUuid).toEqualTypeOf<boolean | string>();
  expect(data.gemstoneSlots).toBeDefined();
  expectTypeOf(data.gemstoneSlots).toEqualTypeOf<Record<string, any>[]>();
  expect(data.glowing).toBeDefined();
  expectTypeOf(data.glowing).toEqualTypeOf<boolean>();
  expect(data.canAuction).toBeDefined();
  expectTypeOf(data.canAuction).toEqualTypeOf<boolean>();
  expect(data.canTrade).toBeDefined();
  expectTypeOf(data.canTrade).toEqualTypeOf<boolean>();
  expect(data.requirements).toBeDefined();
  expectTypeOf(data.requirements).toEqualTypeOf<Record<string, any>[]>();
  expect(data.canPlace).toBeDefined();
  expectTypeOf(data.canPlace).toEqualTypeOf<boolean>();
  expect(data.museum).toBeDefined();
  expectTypeOf(data.museum).toEqualTypeOf<boolean>();
  expect(data.generator).toBeDefined();
  expectTypeOf(data.generator).toEqualTypeOf<string>();
  expect(data.generatorTier).toBeDefined();
  expectTypeOf(data.generatorTier).toEqualTypeOf<number>();
  expect(data.furniture).toBeDefined();
  expectTypeOf(data.furniture).toEqualTypeOf<string>();
  expect(data.itemSpecific).toBeDefined();
  expectTypeOf(data.itemSpecific).toEqualTypeOf<Record<string, any>>();
  expect(data.description).toBeDefined();
  expectTypeOf(data.description).toEqualTypeOf<string>();
  expect(data.upgradeCosts).toBeDefined();
  expectTypeOf(data.upgradeCosts).toEqualTypeOf<Array<Array<Record<string, any>>>>();
  expect(data.gearScore).toBeDefined();
  expectTypeOf(data.gearScore).toEqualTypeOf<number>();
  expect(data.dungeonItem).toBeDefined();
  expectTypeOf(data.dungeonItem).toEqualTypeOf<boolean>();
  expect(data.dungeonItemConversionCost).toBeDefined();
  expectTypeOf(data.dungeonItemConversionCost).toEqualTypeOf<Record<string, any>>();
  expect(data.catacombsRequirements).toBeDefined();
  expectTypeOf(data.catacombsRequirements).toEqualTypeOf<Record<string, any>[]>();
  expect(data.canHaveAttributes).toBeDefined();
  expectTypeOf(data.canHaveAttributes).toEqualTypeOf<boolean>();
  expect(data.salvageableFromRecipe).toBeDefined();
  expectTypeOf(data.salvageableFromRecipe).toEqualTypeOf<boolean>();
  expect(data.canRecombobulate).toBeDefined();
  expectTypeOf(data.canRecombobulate).toEqualTypeOf<boolean>();
  expect(data.enchantments).toBeDefined();
  expectTypeOf(data.enchantments).toEqualTypeOf<Record<string, any>>();
  expect(data.riftTransferrable).toBeDefined();
  expectTypeOf(data.riftTransferrable).toEqualTypeOf<boolean>();
  expect(data.origin).toBeDefined();
  expectTypeOf(data.origin).toEqualTypeOf<string>();
  expect(data.doubleTapToDrop).toBeDefined();
  expectTypeOf(data.doubleTapToDrop).toEqualTypeOf<boolean>();
  expect(data.hideFromViewRecipeCommand).toBeDefined();
  expectTypeOf(data.hideFromViewRecipeCommand).toEqualTypeOf<boolean>();
  expect(data.swordType).toBeDefined();
  expectTypeOf(data.swordType).toEqualTypeOf<string>();
  expect(data.abilityDamageScaling).toBeDefined();
  expectTypeOf(data.abilityDamageScaling).toEqualTypeOf<number>();
  expect(data.tieredStats).toBeDefined();
  expectTypeOf(data.tieredStats).toEqualTypeOf<Record<string, any>>();
  expect(data.motesSellPrice).toBeDefined();
  expectTypeOf(data.motesSellPrice).toEqualTypeOf<number>();
  expect(data.crystal).toBeDefined();
  expectTypeOf(data.crystal).toEqualTypeOf<string>();
  expect(data.canBurnInFurnace).toBeDefined();
  expectTypeOf(data.canBurnInFurnace).toEqualTypeOf<boolean>();
  expect(data.salvage).toBeDefined();
  expectTypeOf(data.salvage).toEqualTypeOf<Record<string, any>>();
  expect(data.serializable).toBeDefined();
  expectTypeOf(data.serializable).toEqualTypeOf<boolean>();
  expect(data.canInteract).toBeDefined();
  expectTypeOf(data.canInteract).toEqualTypeOf<boolean>();
  expect(data.canInteractRightClick).toBeDefined();
  expectTypeOf(data.canInteractRightClick).toEqualTypeOf<boolean>();
  expect(data.privateIsland).toBeDefined();
  expectTypeOf(data.privateIsland).toEqualTypeOf<string>();
  expect(data.canHavePowerScroll).toBeDefined();
  expectTypeOf(data.canHavePowerScroll).toEqualTypeOf<boolean>();
  expect(data.canInteractEntity).toBeDefined();
  expectTypeOf(data.canInteractEntity).toEqualTypeOf<boolean>();
  expect(data.miningFortune).toBeDefined();
  expectTypeOf(data.miningFortune).toEqualTypeOf<number>();
  expect(data.recipes).toBeDefined();
  expectTypeOf(data.recipes).toEqualTypeOf<Record<string, any>[]>();
  expect(data.cannotReforge).toBeDefined();
  expectTypeOf(data.cannotReforge).toEqualTypeOf<boolean>();
  expect(data.loseMotesValueOnTransfer).toBeDefined();
  expectTypeOf(data.loseMotesValueOnTransfer).toEqualTypeOf<boolean>();
  expect(data.prestige).toBeDefined();
  expectTypeOf(data.prestige).toEqualTypeOf<Record<string, any>>();
});
