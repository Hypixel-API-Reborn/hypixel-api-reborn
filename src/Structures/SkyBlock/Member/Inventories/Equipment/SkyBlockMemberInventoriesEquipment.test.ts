import SkyBlockMemberInventoriesEquipment from './SkyBlockMemberInventoriesEquipment.js';
import SkyBlockMemberInventoriesEquipmentDecoded from './SkyBlockMemberInventoriesEquipmentDecoded.js';
import { expect, expectTypeOf, test } from 'vitest';

test('SkyBlockMemberInventoriesEquipment', () => {
  const data = new SkyBlockMemberInventoriesEquipment({
    // eslint-disable-next-line max-len
    data: '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'
  });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyBlockMemberInventoriesEquipment);
  expectTypeOf(data).toEqualTypeOf<SkyBlockMemberInventoriesEquipment>();
  expect(data.base64).toBeDefined();
  expectTypeOf(data.base64).toEqualTypeOf<string | null>();
  expect(data.decodeData).toBeDefined();
  expectTypeOf(data.decodeData).toEqualTypeOf<() => Promise<SkyBlockMemberInventoriesEquipmentDecoded | null>>();
  expect(data.decodeData()).toBeDefined();
  expectTypeOf(data.decodeData()).toEqualTypeOf<Promise<SkyBlockMemberInventoriesEquipmentDecoded | null>>();
});
