import PlayerCosmeticsPet from './PlayerCosmeticsPet.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { PlayerCosmeticsPetName } from '../../../../Types/Player.js';

test('PlayerCosmeticsPet', () => {
  const data = new PlayerCosmeticsPet('meow', { stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(PlayerCosmeticsPet);
  expectTypeOf(data).toEqualTypeOf<PlayerCosmeticsPet>();
  expect(data.isFavorite).toBeDefined();
  expectTypeOf(data.isFavorite).toEqualTypeOf<boolean>();
  expect(data.name).toBeDefined();
  expectTypeOf(data.name).toEqualTypeOf<PlayerCosmeticsPetName | 'UNKNOWN'>();
  expect(data.active).toBeDefined();
  expectTypeOf(data.active).toEqualTypeOf<boolean>();
  expect(data.hunger).toBeDefined();
  expect(data.hunger).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.hunger).toEqualTypeOf<number>();
  expect(data.lastFed).toBeDefined();
  expectTypeOf(data.lastFed).toEqualTypeOf<number | null>();
  expect(data.lastFedAt).toBeDefined();
  expectTypeOf(data.lastFedAt).toEqualTypeOf<Date | null>();
  expect(data.thirst).toBeDefined();
  expect(data.thirst).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.thirst).toEqualTypeOf<number>();
  expect(data.lastDrank).toBeDefined();
  expectTypeOf(data.lastDrank).toEqualTypeOf<number | null>();
  expect(data.lastDrankAt).toBeDefined();
  expectTypeOf(data.lastDrankAt).toEqualTypeOf<Date | null>();
  expect(data.exercise).toBeDefined();
  expect(data.exercise).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exercise).toEqualTypeOf<number>();
  expect(data.lastExercised).toBeDefined();
  expectTypeOf(data.lastExercised).toEqualTypeOf<number | null>();
  expect(data.lastExercisedAt).toBeDefined();
  expectTypeOf(data.lastExercisedAt).toEqualTypeOf<Date | null>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.experience).toBeDefined();
  expect(data.experience).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.experience).toEqualTypeOf<number>();
});
