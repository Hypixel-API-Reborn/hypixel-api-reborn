import Color from '../Color.js';
import Game from '../Game.js';
import Guild from './Guild.js';
import GuildMember from './GuildMember.js';
import GuildRank from './GuildRank.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { ExpHistory } from '../../Types/Guild.js';

test('Guild', () => {
  const data = new Guild({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Guild);
  expectTypeOf(data).toEqualTypeOf<Guild>();
  expect(data.id).toBeDefined();
  expectTypeOf(data.id).toEqualTypeOf<string>();
  expect(data.name).toBeDefined();
  expectTypeOf(data.name).toEqualTypeOf<string>();
  expect(data.description).toBeDefined();
  expectTypeOf(data.description).toEqualTypeOf<string>();
  expect(data.experience).toBeDefined();
  expectTypeOf(data.experience).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.members).toBeDefined();
  expectTypeOf(data.members).toEqualTypeOf<GuildMember[]>();
  expect(data.me).toBeDefined();
  expectTypeOf(data.me).toEqualTypeOf<GuildMember | null>();
  expect(data.ranks).toBeDefined();
  expectTypeOf(data.ranks).toEqualTypeOf<GuildRank[]>();
  expect(data.totalWeeklyGEXP).toBeDefined();
  expectTypeOf(data.totalWeeklyGEXP).toEqualTypeOf<number>();
  expect(data.createdAtTimestamp).toBeDefined();
  expectTypeOf(data.createdAtTimestamp).toEqualTypeOf<number | null>();
  expect(data.createdAt).toBeDefined();
  expectTypeOf(data.createdAt).toEqualTypeOf<Date | null>();
  expect(data.joinable).toBeDefined();
  expectTypeOf(data.joinable).toEqualTypeOf<boolean>();
  expect(data.publiclyListed).toBeDefined();
  expectTypeOf(data.publiclyListed).toEqualTypeOf<boolean>();
  expect(data.chatMuteUntilTimestamp).toBeDefined();
  expectTypeOf(data.chatMuteUntilTimestamp).toEqualTypeOf<number | null>();
  expect(data.chatMuteUntil).toBeDefined();
  expectTypeOf(data.chatMuteUntil).toEqualTypeOf<Date | null>();
  expect(data.banner).toBeDefined();
  expectTypeOf(data.banner).toEqualTypeOf<{ Pattern: string; Color: string }[]>();
  expect(data.tag).toBeDefined();
  expectTypeOf(data.tag).toEqualTypeOf<string>();
  expect(data.tagColor).toBeDefined();
  expectTypeOf(data.tagColor).toEqualTypeOf<Color | null>();
  expect(data.expHistory).toBeDefined();
  expectTypeOf(data.expHistory).toEqualTypeOf<ExpHistory[]>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<{ winners: number; experienceKings: number; onlinePlayers: number }>();
  expect(data.preferredGames).toBeDefined();
  expectTypeOf(data.preferredGames).toEqualTypeOf<Game[]>();
  expect(data.toString()).toBeDefined();
  expect(data.toString()).toBe(data.name);
  expectTypeOf(data.toString()).toEqualTypeOf<string>();
  expect(data.guildMaster).toBeDefined();
  expectTypeOf(data.guildMaster()).toEqualTypeOf<GuildMember | undefined>();
});
