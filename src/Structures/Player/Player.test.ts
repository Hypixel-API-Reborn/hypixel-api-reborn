import Arcade from '../MiniGames/Arcade/Arcade.js';
import ArenaBrawl from '../MiniGames/ArenaBrawl/ArenaBrawl.js';
import BedWars from '../MiniGames/BedWars/BedWars.js';
import BlitzSurvivalGames from '../MiniGames/BlitzSurvivalGames/BlitzSurvivalGames.js';
import BuildBattle from '../MiniGames/BuildBattle.js';
import Color from '../Color.js';
import CopsAndCrims from '../MiniGames/CopsAndCrims/CopsAndCrims.js';
import Cosmetics from './Cosmetics.js';
import Duels from '../MiniGames/Duels/Duels.js';
import Gifting from './Gifting.js';
import Guild from '../Guild/Guild.js';
import House from '../House.js';
import Housing from '../Housing.js';
import MegaWalls from '../MiniGames/MegaWalls/MegaWalls.js';
import MurderMystery from '../MiniGames/MurderMystery/MurderMystery.js';
import Paintball from '../MiniGames/Paintball.js';
import Parkour from './Parkour.js';
import Pit from '../MiniGames/Pit/Pit.js';
import Player from './Player.js';
import PlayerAchievements from './PlayerAchievements.js';
import PlayerQuests from './Quests/PlayerQuests.js';
import Quakecraft from '../MiniGames/Quakecraft/Quakecraft.js';
import RecentGame from '../RecentGame.js';
import Rewards from './Rewards.js';
import Seasonal from './Seasonal/Seasonal.js';
import SkyWars from '../MiniGames/SkyWars/SkyWars.js';
import SmashHeroes from '../MiniGames/SmashHeroes/SmashHeroes.js';
import SocialMedia from './SocialMedia.js';
import SpeedUHC from '../MiniGames/SpeedUHC/SpeedUHC.js';
import TNTGames from '../MiniGames/TNTGames/TNTGames.js';
import Tourney from './Tourney/Tourney.js';
import TurboKartRacers from '../MiniGames/TurboKartRacers/TurboKartRacers.js';
import UHC from '../MiniGames/UHC/UHC.js';
import VampireZ from '../MiniGames/VampireZ/VampireZ.js';
import Walls from '../MiniGames/Walls.js';
import Warlords from '../MiniGames/Warlords/Warlords.js';
import WoolGames from '../MiniGames/WoolGames/WoolGames.js';
import { expect, expectTypeOf, test } from 'vitest';
import type {
  ChatChannel,
  Language,
  LevelProgress,
  PlayerRank,
  PlayerStats,
  ScorpiusBribe
} from '../../Types/Player.js';

test('Player', () => {
  const data = new Player({ stats: 'meow' }, { guild: null, houses: null, recentGames: null });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(Player);
  expectTypeOf(data).toEqualTypeOf<Player>();
  expect(data.uuid).toBeDefined();
  expectTypeOf(data.uuid).toEqualTypeOf<string>();
  expect(data.nickname).toBeDefined();
  expectTypeOf(data.nickname).toEqualTypeOf<string>();
  expect(data.rank).toBeDefined();
  expectTypeOf(data.rank).toEqualTypeOf<PlayerRank>();
  expect(data.mvpPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusColor).toEqualTypeOf<Color | null>();
  expect(data.mvpPlusPlusColor).toBeDefined();
  expectTypeOf(data.mvpPlusPlusColor).toEqualTypeOf<Color | null>();
  expect(data.gifting).toBeDefined();
  expectTypeOf(data.gifting).toEqualTypeOf<Gifting>();
  expect(data.socialMedia).toBeDefined();
  expectTypeOf(data.socialMedia).toEqualTypeOf<SocialMedia[]>();
  expect(data.firstLoginTimestamp).toBeDefined();
  expect(data.firstLoginTimestamp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.firstLoginTimestamp).toEqualTypeOf<number>();
  expect(data.firstLoginAt).toBeDefined();
  expectTypeOf(data.firstLoginAt).toEqualTypeOf<Date>();
  expect(data.lastLoginTimestamp).toBeDefined();
  expectTypeOf(data.lastLoginTimestamp).toEqualTypeOf<number | null>();
  expect(data.lastLoginAt).toBeDefined();
  expectTypeOf(data.lastLoginAt).toEqualTypeOf<Date | null>();
  expect(data.achievements).toBeDefined();
  expectTypeOf(data.achievements).toEqualTypeOf<PlayerAchievements>();
  expect(data.language).toBeDefined();
  expectTypeOf(data.language).toEqualTypeOf<Language>();
  expect(data.channel).toBeDefined();
  expectTypeOf(data.channel).toEqualTypeOf<ChatChannel>();
  expect(data.exp).toBeDefined();
  expect(data.exp).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.exp).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<LevelProgress>();
  expect(data.seasonal).toBeDefined();
  expectTypeOf(data.seasonal).toEqualTypeOf<Seasonal>();
  expect(data.karma).toBeDefined();
  expect(data.karma).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.karma).toEqualTypeOf<number>();
  expect(data.freeSkyBlockCookie).toBeDefined();
  expectTypeOf(data.freeSkyBlockCookie).toEqualTypeOf<number | null>();
  expect(data.tourney).toBeDefined();
  expectTypeOf(data.tourney).toEqualTypeOf<Tourney>();
  expect(data.rewards).toBeDefined();
  expectTypeOf(data.rewards).toEqualTypeOf<Rewards>();
  expect(data.challenges).toBeDefined();
  expectTypeOf(data.challenges).toEqualTypeOf<object>();
  expect(data.parkour).toBeDefined();
  expectTypeOf(data.parkour).toEqualTypeOf<Parkour[]>();
  expect(data.housing).toBeDefined();
  expectTypeOf(data.housing).toEqualTypeOf<Housing>();
  expect(data.cosmetics).toBeDefined();
  expectTypeOf(data.cosmetics).toEqualTypeOf<Cosmetics>();
  expect(data.scorpiusBribes).toBeDefined();
  expectTypeOf(data.scorpiusBribes).toEqualTypeOf<ScorpiusBribe[]>();
  expect(data.quests).toBeDefined();
  expectTypeOf(data.quests).toEqualTypeOf<PlayerQuests>();
  expect(data.guild).toBeDefined();
  expectTypeOf(data.guild).toEqualTypeOf<Guild | null>();
  expect(data.houses).toBeDefined();
  expectTypeOf(data.houses).toEqualTypeOf<House[] | null>();
  expect(data.recentGames).toBeDefined();
  expectTypeOf(data.recentGames).toEqualTypeOf<RecentGame[] | null>();
  expect(data.stats).toBeDefined();
  expectTypeOf(data.stats).toEqualTypeOf<PlayerStats>();
  expect(data.stats.Arcade).toBeDefined();
  expect(data.stats.Arcade).toBeInstanceOf(Arcade);
  expectTypeOf(data.stats.Arcade).toEqualTypeOf<Arcade>();
  expect(data.stats.ArenaBrawl).toBeDefined();
  expect(data.stats.ArenaBrawl).toBeInstanceOf(ArenaBrawl);
  expectTypeOf(data.stats.ArenaBrawl).toEqualTypeOf<ArenaBrawl>();
  expect(data.stats.BedWars).toBeDefined();
  expect(data.stats.BedWars).toBeInstanceOf(BedWars);
  expectTypeOf(data.stats.BedWars).toEqualTypeOf<BedWars>();
  expect(data.stats.BlitzSurvivalGames).toBeDefined();
  expect(data.stats.BlitzSurvivalGames).toBeInstanceOf(BlitzSurvivalGames);
  expectTypeOf(data.stats.BlitzSurvivalGames).toEqualTypeOf<BlitzSurvivalGames>();
  expect(data.stats.BuildBattle).toBeDefined();
  expect(data.stats.BuildBattle).toBeInstanceOf(BuildBattle);
  expectTypeOf(data.stats.BuildBattle).toEqualTypeOf<BuildBattle>();
  expect(data.stats.CopsAndCrims).toBeDefined();
  expect(data.stats.CopsAndCrims).toBeInstanceOf(CopsAndCrims);
  expectTypeOf(data.stats.CopsAndCrims).toEqualTypeOf<CopsAndCrims>();
  expect(data.stats.Duels).toBeDefined();
  expect(data.stats.Duels).toBeInstanceOf(Duels);
  expectTypeOf(data.stats.Duels).toEqualTypeOf<Duels>();
  expect(data.stats.MegaWalls).toBeDefined();
  expect(data.stats.MegaWalls).toBeInstanceOf(MegaWalls);
  expectTypeOf(data.stats.MegaWalls).toEqualTypeOf<MegaWalls>();
  expect(data.stats.MurderMystery).toBeDefined();
  expect(data.stats.MurderMystery).toBeInstanceOf(MurderMystery);
  expectTypeOf(data.stats.MurderMystery).toEqualTypeOf<MurderMystery>();
  expect(data.stats.Paintball).toBeDefined();
  expect(data.stats.Paintball).toBeInstanceOf(Paintball);
  expectTypeOf(data.stats.Paintball).toEqualTypeOf<Paintball>();
  expect(data.stats.Pit).toBeDefined();
  expect(data.stats.Pit).toBeInstanceOf(Pit);
  expectTypeOf(data.stats.Pit).toEqualTypeOf<Pit>();
  expect(data.stats.QuakeCraft).toBeDefined();
  expect(data.stats.QuakeCraft).toBeInstanceOf(Quakecraft);
  expectTypeOf(data.stats.QuakeCraft).toEqualTypeOf<Quakecraft>();
  expect(data.stats.SkyWars).toBeDefined();
  expect(data.stats.SkyWars).toBeInstanceOf(SkyWars);
  expectTypeOf(data.stats.SkyWars).toEqualTypeOf<SkyWars>();
  expect(data.stats.SmashHeroes).toBeDefined();
  expect(data.stats.SmashHeroes).toBeInstanceOf(SmashHeroes);
  expectTypeOf(data.stats.SmashHeroes).toEqualTypeOf<SmashHeroes>();
  expect(data.stats.SpeedUHC).toBeDefined();
  expect(data.stats.SpeedUHC).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data.stats.SpeedUHC).toEqualTypeOf<SpeedUHC>();
  expect(data.stats.TNTGames).toBeDefined();
  expect(data.stats.TNTGames).toBeInstanceOf(TNTGames);
  expectTypeOf(data.stats.TNTGames).toEqualTypeOf<TNTGames>();
  expect(data.stats.TurboKartRacers).toBeDefined();
  expect(data.stats.TurboKartRacers).toBeInstanceOf(TurboKartRacers);
  expectTypeOf(data.stats.TurboKartRacers).toEqualTypeOf<TurboKartRacers>();
  expect(data.stats.UHC).toBeDefined();
  expect(data.stats.UHC).toBeInstanceOf(UHC);
  expectTypeOf(data.stats.UHC).toEqualTypeOf<UHC>();
  expect(data.stats.VampireZ).toBeDefined();
  expect(data.stats.VampireZ).toBeInstanceOf(VampireZ);
  expectTypeOf(data.stats.VampireZ).toEqualTypeOf<VampireZ>();
  expect(data.stats.Walls).toBeDefined();
  expect(data.stats.Walls).toBeInstanceOf(Walls);
  expectTypeOf(data.stats.Walls).toEqualTypeOf<Walls>();
  expect(data.stats.Warlords).toBeDefined();
  expect(data.stats.Warlords).toBeInstanceOf(Warlords);
  expectTypeOf(data.stats.Warlords).toEqualTypeOf<Warlords>();
  expect(data.stats.WoolGames).toBeDefined();
  expect(data.stats.WoolGames).toBeInstanceOf(WoolGames);
  expectTypeOf(data.stats.WoolGames).toEqualTypeOf<WoolGames>();
});
