import SkyblockMemberChocolateFactory from './SkyblockMemberChocolateFactory.js';
import SkyblockMemberChocolateFactoryEggs from './SkyblockMemberChocolateFactoryEggs.js';
import SkyblockMemberChocolateFactoryEmployees from './SkyblockMemberChocolateFactoryEmployees.js';
import SkyblockMemberChocolateFactoryHitmen from './SkyblockMemberChocolateFactoryHitmen.js';
import SkyblockMemberChocolateFactoryTimeTower from './SkyblockMemberChocolateFactoryTimeTower.js';
import SkyblockMemberChocolateFactoryUpgrades from './SkyblockMemberChocolateFactoryUpgrades.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SkyblockArea } from '../../../../Types/Skyblock.js';

test('SkyblockMemberChocolateFactory', () => {
  const data = new SkyblockMemberChocolateFactory({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyblockMemberChocolateFactory);
  expectTypeOf(data).toEqualTypeOf<SkyblockMemberChocolateFactory>();
  expect(data.employees).toBeDefined();
  expectTypeOf(data.employees).toEqualTypeOf<SkyblockMemberChocolateFactoryEmployees>();
  expect(data.timeTower).toBeDefined();
  expectTypeOf(data.timeTower).toEqualTypeOf<SkyblockMemberChocolateFactoryTimeTower>();
  expect(data.upgrades).toBeDefined();
  expectTypeOf(data.upgrades).toEqualTypeOf<SkyblockMemberChocolateFactoryUpgrades>();
  expect(data.hitman).toBeDefined();
  expectTypeOf(data.hitman).toEqualTypeOf<SkyblockMemberChocolateFactoryHitmen>();
  expect(data.currentChocolate).toBeDefined();
  expectTypeOf(data.currentChocolate).toEqualTypeOf<number>();
  expect(data.chocolateSincePrestige).toBeDefined();
  expectTypeOf(data.chocolateSincePrestige).toEqualTypeOf<number>();
  expect(data.totalChocolate).toBeDefined();
  expectTypeOf(data.totalChocolate).toEqualTypeOf<number>();
  expect(data.barnCapacity).toBeDefined();
  expectTypeOf(data.barnCapacity).toEqualTypeOf<number>();
  expect(data.prestige).toBeDefined();
  expectTypeOf(data.prestige).toEqualTypeOf<number>();
  expect(data.lastViewedChocolateFactory).toBeDefined();
  expectTypeOf(data.lastViewedChocolateFactory).toEqualTypeOf<number>();
  expect(data.lastViewedChocolateFactoryDate).toBeDefined();
  expectTypeOf(data.lastViewedChocolateFactoryDate).toEqualTypeOf<Date>();
  expect(data.supremeChocolateBars).toBeDefined();
  expectTypeOf(data.supremeChocolateBars).toEqualTypeOf<number>();
  expect(data.eggs).toBeDefined();
  expectTypeOf(data.eggs).toEqualTypeOf<SkyblockMemberChocolateFactoryEggs>();
  expect(data.foundRabbits).toBeDefined();
  expectTypeOf(data.foundRabbits).toEqualTypeOf<Record<string, number>>();
  expect(data.foundEggLocations).toBeDefined();
  expectTypeOf(data.foundEggLocations).toEqualTypeOf<Record<keyof SkyblockArea, string[]>>();
  expect(data.toString).toBeDefined();
  expectTypeOf(data.toString).toEqualTypeOf<() => number>();
  expect(data.toString()).toBeDefined();
  expect(data.toString()).toEqual(data.currentChocolate);
  expectTypeOf(data.toString()).toEqualTypeOf<number>();
});
