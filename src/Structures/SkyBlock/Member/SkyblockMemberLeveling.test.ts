import SkyblockMemberLeveling from './SkyblockMemberLeveling.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { TaskLevelingSort } from '../../../Types/Skyblock.js';

test('SkyblockMemberLeveling', () => {
  const data = new SkyblockMemberLeveling({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyblockMemberLeveling);
  expectTypeOf(data).toEqualTypeOf<SkyblockMemberLeveling>();
  expect(data.experience).toBeDefined();
  expectTypeOf(data.experience).toEqualTypeOf<number>();
  expect(data.level).toBeDefined();
  expectTypeOf(data.level).toEqualTypeOf<number>();
  expect(data.completions).toBeDefined();
  expectTypeOf(data.completions).toEqualTypeOf<Record<string, number>>();
  expect(data.completed).toBeDefined();
  expectTypeOf(data.completed).toEqualTypeOf<string[]>();
  expect(data.completedTasks).toBeDefined();
  expectTypeOf(data.completedTasks).toEqualTypeOf<string[]>();
  expect(data.lastViewedTasks).toBeDefined();
  expectTypeOf(data.lastViewedTasks).toEqualTypeOf<string[]>();
  expect(data.highestPetScore).toBeDefined();
  expectTypeOf(data.highestPetScore).toEqualTypeOf<number>();
  expect(data.miningFiestaOresMined).toBeDefined();
  expectTypeOf(data.miningFiestaOresMined).toEqualTypeOf<number>();
  expect(data.fishingFestivalSharksKilled).toBeDefined();
  expectTypeOf(data.fishingFestivalSharksKilled).toEqualTypeOf<number>();
  expect(data.taskSort).toBeDefined();
  expectTypeOf(data.taskSort).toEqualTypeOf<TaskLevelingSort | 'UNKNOWN'>();
  expect(data.claimedTalisman).toBeDefined();
  expectTypeOf(data.claimedTalisman).toEqualTypeOf<boolean>();
  expect(data.emblemUnlocks).toBeDefined();
  expectTypeOf(data.emblemUnlocks).toEqualTypeOf<string[]>();
});
