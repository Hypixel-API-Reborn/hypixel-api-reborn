import SkyWarsMode from './SkyWarsMode.js';
import SkyWarsModeStats from './SkyWarsModeStats.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SkyWarsKitNames } from '../../../Types/Player.js';

test('SkyWars (Mode Stats)', () => {
  const data = new SkyWarsModeStats({ stats: 'meow' }, 'solo');
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyWarsModeStats);
  expectTypeOf(data).toEqualTypeOf<SkyWarsModeStats>();
  expect(data.activeKit).toBeDefined();
  expectTypeOf(data.activeKit).toEqualTypeOf<SkyWarsKitNames>();
  expect(data.killStreak).toBeDefined();
  expect(data.killStreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.killStreak).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.voidKills).toBeDefined();
  expect(data.voidKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.voidKills).toEqualTypeOf<number>();
  expect(data.meleeKills).toBeDefined();
  expect(data.meleeKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.meleeKills).toEqualTypeOf<number>();
  expect(data.bowKills).toBeDefined();
  expect(data.bowKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bowKills).toEqualTypeOf<number>();
  expect(data.mobKills).toBeDefined();
  expect(data.mobKills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.mobKills).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.gamesPlayed).toBeDefined();
  expect(data.gamesPlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.gamesPlayed).toEqualTypeOf<number>();
  expect(data.survivedPlayers).toBeDefined();
  expect(data.survivedPlayers).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.survivedPlayers).toEqualTypeOf<number>();
  expect(data.chestsOpened).toBeDefined();
  expect(data.chestsOpened).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.chestsOpened).toEqualTypeOf<number>();
  expect(data.timePlayed).toBeDefined();
  expect(data.timePlayed).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.timePlayed).toEqualTypeOf<number>();
  expect(data.shard).toBeDefined();
  expect(data.shard).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.shard).toEqualTypeOf<number>();
  expect(data.longestBowShot).toBeDefined();
  expect(data.longestBowShot).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.longestBowShot).toEqualTypeOf<number>();
  expect(data.arrowsShot).toBeDefined();
  expect(data.arrowsShot).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.arrowsShot).toEqualTypeOf<number>();
  expect(data.arrowsHit).toBeDefined();
  expect(data.arrowsHit).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.arrowsHit).toEqualTypeOf<number>();
  expect(data.bowAccuracy).toBeDefined();
  expect(data.bowAccuracy).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.bowAccuracy).toEqualTypeOf<number>();
  expect(data.fastestWin).toBeDefined();
  expect(data.fastestWin).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.fastestWin).toEqualTypeOf<number>();
  expect(data.heads).toBeDefined();
  expect(data.heads).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.heads).toEqualTypeOf<number>();
  expect(data.normal).toBeDefined();
  expectTypeOf(data.normal).toEqualTypeOf<SkyWarsMode>();
  expect(data.insane).toBeDefined();
  expectTypeOf(data.insane).toEqualTypeOf<SkyWarsMode>();
});
