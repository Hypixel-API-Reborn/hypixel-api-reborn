import SkyBlockBingoGoal from './SkyBlockBingoGoal.js';
import { expect, expectTypeOf, test } from 'vitest';
import type { SkyBlockBingoGoalType } from '../../../Types/SkyBlock.js';

test('SkyBlockBingoGoal', () => {
  const data = new SkyBlockBingoGoal({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SkyBlockBingoGoal);
  expectTypeOf(data).toEqualTypeOf<SkyBlockBingoGoal>();
  expect(data.name).toBeDefined();
  expectTypeOf(data.name).toEqualTypeOf<string>();
  expect(data.id).toBeDefined();
  expectTypeOf(data.id).toEqualTypeOf<string>();
  expect(data.row).toBeDefined();
  expectTypeOf(data.row).toEqualTypeOf<number | null>();
  expect(data.column).toBeDefined();
  expectTypeOf(data.column).toEqualTypeOf<number | null>();
  expect(data.lore).toBeDefined();
  expectTypeOf(data.lore).toEqualTypeOf<string>();
  expect(data.progress).toBeDefined();
  expectTypeOf(data.progress).toEqualTypeOf<number>();
  expect(data.tiers).toBeDefined();
  expectTypeOf(data.tiers).toEqualTypeOf<number[]>();
  expect(data.requiredAmount).toBeDefined();
  expectTypeOf(data.requiredAmount).toEqualTypeOf<number | null>();
  expect(data.type).toBeDefined();
  expectTypeOf(data.type).toEqualTypeOf<SkyBlockBingoGoalType>();
  expect(data.toString).toBeDefined();
  expectTypeOf(data.toString).toEqualTypeOf<() => string>();
  expect(data.toString()).toBeDefined();
  expect(data.toString()).toEqual(data.id);
  expectTypeOf(data.toString()).toEqualTypeOf<string>();
});
