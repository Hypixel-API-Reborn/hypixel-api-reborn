import SpeedUHC from './SpeedUHC.js';
import SpeedUHCMode from './SpeedUHCMode.js';
import { expect, expectTypeOf, test } from 'vitest';

test('SpeedUHC', () => {
  const data = new SpeedUHC({ stats: 'meow' });
  expect(data).toBeDefined();
  expect(data).toBeInstanceOf(SpeedUHC);
  expectTypeOf(data).toEqualTypeOf<SpeedUHC>();
  expect(data.coins).toBeDefined();
  expect(data.coins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.coins).toEqualTypeOf<number>();
  expect(data.kills).toBeDefined();
  expect(data.kills).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.kills).toEqualTypeOf<number>();
  expect(data.deaths).toBeDefined();
  expect(data.deaths).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.deaths).toEqualTypeOf<number>();
  expect(data.KDR).toBeDefined();
  expect(data.KDR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.KDR).toEqualTypeOf<number>();
  expect(data.wins).toBeDefined();
  expect(data.wins).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.wins).toEqualTypeOf<number>();
  expect(data.losses).toBeDefined();
  expect(data.losses).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.losses).toEqualTypeOf<number>();
  expect(data.WLR).toBeDefined();
  expect(data.WLR).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.WLR).toEqualTypeOf<number>();
  expect(data.playedGames).toBeDefined();
  expect(data.playedGames).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.playedGames).toEqualTypeOf<number>();
  expect(data.winStreak).toBeDefined();
  expect(data.winStreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.winStreak).toEqualTypeOf<number>();
  expect(data.killstreak).toBeDefined();
  expect(data.killstreak).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.killstreak).toEqualTypeOf<number>();
  expect(data.blocksBroken).toBeDefined();
  expect(data.blocksBroken).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksBroken).toEqualTypeOf<number>();
  expect(data.blocksPlaced).toBeDefined();
  expect(data.blocksPlaced).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.blocksPlaced).toEqualTypeOf<number>();
  expect(data.quits).toBeDefined();
  expect(data.quits).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.quits).toEqualTypeOf<number>();
  expect(data.itemsEnchanted).toBeDefined();
  expect(data.itemsEnchanted).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.itemsEnchanted).toEqualTypeOf<number>();
  expect(data.assists).toBeDefined();
  expect(data.assists).toBeGreaterThanOrEqual(0);
  expectTypeOf(data.assists).toEqualTypeOf<number>();
  expect(data.solo).toBeDefined();
  expectTypeOf(data.solo).toEqualTypeOf<SpeedUHCMode>();
  expect(data.soloNormal).toBeDefined();
  expectTypeOf(data.soloNormal).toEqualTypeOf<SpeedUHCMode>();
  expect(data.soloInsane).toBeDefined();
  expectTypeOf(data.soloInsane).toEqualTypeOf<SpeedUHCMode>();
  expect(data.team).toBeDefined();
  expectTypeOf(data.team).toEqualTypeOf<SpeedUHCMode>();
  expect(data.teamNormal).toBeDefined();
  expectTypeOf(data.teamNormal).toEqualTypeOf<SpeedUHCMode>();
  expect(data.teamInsane).toBeDefined();
  expectTypeOf(data.teamInsane).toEqualTypeOf<SpeedUHCMode>();
});
