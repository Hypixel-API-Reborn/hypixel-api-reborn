import CopsAndCrimsGamemode from './CopsAndCrimsGamemode.js';
import CopsAndCrimsGun from './CopsAndCrimsGun.js';
import Divide from '../../../Utils/Divide.js';

class CopsAndCrims {
  coins: number;
  kills: number;
  criminalKills: number;
  copKills: number;
  headShotKills: number;
  grenadeKills: number;
  assists: number;
  deaths: number;
  KDR: number;
  winsOnTemple: number;
  winsOnCarrier: number;
  winsOnAtomic: number;
  winsOnAlleyway: number;
  winsOnSandstorm: number;
  winsOnReserve: number;
  winsOnOvergrown: number;
  winsOnBazaar: number;
  winsOnJunction: number;
  winsOnDerailed: number;
  winsOnCastle: number;
  winsOnRuins: number;
  winsOnRiviera: number;
  winsOnHarbor: number;
  winsOnAtomicV1: number;
  winsOnAtomicV2: number;
  winsOnMelonFactory: number;
  winsOnMelonFactoryV2: number;
  wins: number;
  gamesPlayed: number;
  losses: number;
  WLR: number;
  roundWins: number;
  bombsPlanted: number;
  bombsDefused: number;
  shotsFired: number;
  showPrefixInLobby: boolean;
  selectedLobbyPrefix: string;
  lobbyPrefixColor: string;
  showHints: boolean;
  showKillsInPrefix: boolean;
  score: number;
  level: number;
  activeGlyph: string;
  activeScheme: string;
  activeEmblem: string;
  packages: string[];
  smg: CopsAndCrimsGun;
  rifle: CopsAndCrimsGun;
  carbine: CopsAndCrimsGun;
  magnum: CopsAndCrimsGun;
  shotgun: CopsAndCrimsGun;
  sniper: CopsAndCrimsGun;
  scopedRifle: CopsAndCrimsGun;
  handgun: CopsAndCrimsGun;
  autoShotgun: CopsAndCrimsGun;
  bullpup: CopsAndCrimsGun;
  knife: CopsAndCrimsGun;
  deathmatch: CopsAndCrimsGamemode;
  gungame: CopsAndCrimsGamemode;
  constructor(data: Record<string, any>) {
    this.coins = data?.coins || 0;
    this.kills = data?.kills || 0;
    this.criminalKills = data?.criminal_kills || 0;
    this.copKills = data?.cop_kills || 0;
    this.headShotKills = data?.headshot_kills || 0;
    this.grenadeKills = data?.grenade_kills || 0;
    this.assists = data?.assists || 0;
    this.deaths = data?.deaths || 0;
    this.KDR = Divide(this.kills, this.deaths);
    this.winsOnTemple = data?.game_wins_temple || 0;
    this.winsOnCarrier = data?.game_wins_carrier || 0;
    this.winsOnAtomic = data?.game_wins_atomic || 0;
    this.winsOnAlleyway = data?.game_wins_alleyway || 0;
    this.winsOnSandstorm = data?.game_wins_sandstorm || 0;
    this.winsOnReserve = data?.game_wins_reserve || 0;
    this.winsOnOvergrown = data?.game_wins_overgrown || 0;
    this.winsOnBazaar = data?.game_wins_bazaar || 0;
    this.winsOnJunction = data?.game_wins_junction || 0;
    this.winsOnDerailed = data?.game_wins_derailed || 0;
    this.winsOnCastle = data?.game_wins_castle || 0;
    this.winsOnRuins = data?.game_wins_ruins || 0;
    this.winsOnRiviera = data?.game_wins_riviera || 0;
    this.winsOnHarbor = data?.game_wins_harbor || 0;
    this.winsOnAtomicV1 = data?.['game_wins_atomic v1'] || 0;
    this.winsOnAtomicV2 = data?.['game_wins_atomic v2'] || 0;
    this.winsOnMelonFactory = data?.['game_wins_melon factory'] || 0;
    this.winsOnMelonFactoryV2 = data?.['game_wins_melon factory v2'] || 0;
    this.wins = data?.game_wins || 0;
    this.gamesPlayed = data?.game_plays || 0;
    this.losses = this.gamesPlayed - this.wins;
    this.WLR = Divide(this.wins, this.losses);
    this.roundWins = data?.round_wins || 0;
    this.bombsPlanted = data?.bombs_planted || 0;
    this.bombsDefused = data?.bombs_defused || 0;
    this.shotsFired = data?.shots_fired || 0;
    this.showPrefixInLobby = data?.show_lobby_prefix || true;
    this.selectedLobbyPrefix = data?.selected_lobby_prefix || '';
    this.lobbyPrefixColor = data?.lobbyPrefixColor || '';
    this.showHints = data?.setting_hints || true;
    this.showKillsInPrefix = data?.show_kills_in_prefix || true;
    this.score = data?.score || 0;
    this.level = data?.level || 0;
    this.activeGlyph = data?.active_glyph || 'None';
    this.activeScheme = data?.active_scheme || 'None';
    this.activeEmblem = data?.active_emblem || 'None';
    this.packages = data?.packages || [];
    this.smg = new CopsAndCrimsGun(data, 'smg');
    this.rifle = new CopsAndCrimsGun(data, 'rifle');
    this.carbine = new CopsAndCrimsGun(data, 'carbine');
    this.magnum = new CopsAndCrimsGun(data, 'magnum');
    this.shotgun = new CopsAndCrimsGun(data, 'shotgun');
    this.sniper = new CopsAndCrimsGun(data, 'sniper');
    this.scopedRifle = new CopsAndCrimsGun(data, 'scoped_rifle');
    this.handgun = new CopsAndCrimsGun(data, 'handgun');
    this.autoShotgun = new CopsAndCrimsGun(data, 'auto_shotgun');
    this.bullpup = new CopsAndCrimsGun(data, 'bullpup');
    this.knife = new CopsAndCrimsGun(data, 'knife');
    this.deathmatch = new CopsAndCrimsGamemode(data, 'deathmatch');
    this.gungame = new CopsAndCrimsGamemode(data, 'gungame');
  }
}

export default CopsAndCrims;
